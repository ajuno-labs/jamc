services:
  app:
    build:
      context: .
      target: dev  # Use the dev stage for local development
    volumes:
      - .:/app  # Mount source code for hot reloading
      - /app/node_modules  # Prevent overriding node_modules
      - /app/.next  # Prevent overriding Next.js build output
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://jamc:jamc@db:5432/jamc?schema=public
      - AUTH_SECRET=${AUTH_SECRET}
      - AUTH_GOOGLE_ID=${AUTH_GOOGLE_ID}
      - AUTH_GOOGLE_SECRET=${AUTH_GOOGLE_SECRET}
    depends_on:
      db:
        condition: service_healthy
    command: sh -c "pnpm install && pnpm db:migrate && pnpm db:seed && pnpm dev"  
    develop:
      watch:
        - action: sync
          path: ./
          target: /app
          ignore:
            - node_modules/
            - .next/
        - action: rebuild
          path: package.json

  db:
    image: postgres:16-alpine
    environment:
      - POSTGRES_USER=jamc
      - POSTGRES_PASSWORD=jamc
      - POSTGRES_DB=jamc
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U jamc"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Adminer for database management (development only)
  adminer:
    image: adminer
    ports:
      - "8080:8080"
    depends_on:
      - db

  # Redis service is commented out for now. Uncomment and configure if needed later.
  # redis:
  #   image: redis:alpine
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis_data:/data
  #   command: redis-server --appendonly yes
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 5s
  #     timeout: 5s
  #     retries: 5

volumes:
  postgres_data:
  # redis_data:

# For development:
# docker compose --profile dev up
#
# For production:
# docker compose --profile prod up -d
#
# Environment variables can be set in a .env file or passed via command line:
# TARGET=runner NODE_ENV=production COMMAND="node server.js" docker compose --profile prod up -d 