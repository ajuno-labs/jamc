services:
  app:
    build:
      context: .
      target: ${TARGET:-base}  # Use 'base' for dev, 'runner' for prod
    volumes:
      - .:/app  # Mount source code for development
      - /app/node_modules  # Don't override node_modules
      - /app/.next  # Don't override Next.js build
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DATABASE_URL=postgresql://jamc:jamc@db:5432/jamc?schema=public
      - AUTH_SECRET=${AUTH_SECRET:-development_secret}
      - AUTH_GOOGLE_ID=${AUTH_GOOGLE_ID}
      - AUTH_GOOGLE_SECRET=${AUTH_GOOGLE_SECRET}
    depends_on:
      db:
        condition: service_healthy
    command: ${COMMAND:-pnpm dev}  # Use 'pnpm dev' for development, 'node server.js' for production
    develop:
      watch:
        - action: sync
          path: ./
          target: /app
          ignore:
            - node_modules/
            - .next/
        - action: rebuild
          path: package.json

  db:
    image: postgres:16-alpine
    environment:
      - POSTGRES_USER=jamc
      - POSTGRES_PASSWORD=jamc
      - POSTGRES_DB=jamc
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U jamc"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Adminer for database management (development only)
  adminer:
    image: adminer
    ports:
      - "8080:8080"
    depends_on:
      - db
    profiles:
      - dev

  # Redis for caching and session storage (optional)
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    profiles:
      - prod
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  redis_data:

# For development:
# docker compose --profile dev up
#
# For production:
# docker compose --profile prod up -d
#
# Environment variables can be set in a .env file or passed via command line:
# TARGET=runner NODE_ENV=production COMMAND="node server.js" docker compose --profile prod up -d 