// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique @email
  password      String?         @password @omit @length(min: 8, max: 32)
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  roles         Role[]
  
  // Add access policies
  @@allow('create', true) // Allow signups
  @@allow('read,update', auth() == this) // Users can read/update their own profile
  @@deny('delete', true) // Prevent direct deletions
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String
  users       User[] // users belonging to the role
  permissions Permission[] // permissions assigned to the role
}

enum PermissionType {
  READ    // Basic read/view access
  CREATE  // Ability to create new resources
  UPDATE  // Ability to modify existing resources
  DELETE  // Ability to remove resources
  MANAGE  // Full control (typically includes all above permissions)
}

model Permission {
  id    Int            @id @default(autoincrement())
  name  PermissionType
  roles Role[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])

  // Allow creation if it's the user's own account
  @@allow('create', auth() == user)
  
  // Allow read if:
  // 1. It's the user's own account OR
  // 2. The authenticated user has READ permission
  @@allow('read', auth() == user || auth().roles?[permissions?[name == READ]])
  
  // Allow update if:
  // 1. It's the user's own account OR
  // 2. The authenticated user has UPDATE permission
  @@allow('update', auth() == user || auth().roles?[permissions?[name == UPDATE]])
  
  // Allow delete if:
  // 1. It's the user's own account OR
  // 2. The authenticated user has DELETE permission
  @@allow('delete', auth() == user || auth().roles?[permissions?[name == DELETE]])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Allow creation for authenticated users (when they log in)
  @@allow('create', auth() != null)

  // Allow read if:
  // 1. It's the user's own session OR
  // 2. The authenticated user has READ permission
  @@allow('read', auth() == user || auth().roles?[permissions?[name == READ]])

  // Allow update if:
  // 1. It's the user's own session OR
  // 2. The authenticated user has UPDATE permission
  @@allow('update', auth() == user || auth().roles?[permissions?[name == UPDATE]])

  // Allow delete if:
  // 1. It's the user's own session (logout) OR
  // 2. The authenticated user has DELETE permission
  @@allow('delete', auth() == user || auth().roles?[permissions?[name == DELETE]])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
