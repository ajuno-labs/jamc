// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String             @id @default(cuid())
  name            String?
  email           String             @unique @email
  password        String?            @password @omit @length(min: 8, max: 32)
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  // Optional for WebAuthn support
  Authenticator   Authenticator[]

  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  roles           Role[]
  
  // Add access policies
  @@allow('create', true) // Allow signups
  @@allow('read', true)
  @@allow('update', auth() == this) // Users can update their own profile
  @@deny('delete', true) // Prevent direct deletions

  questions       Question[]
  answers         Answer[]
  questionVotes   QuestionVote[]
  answerVotes     AnswerVote[]
  
  // Course relations
  createdCourses  Course[]           @relation("CourseCreator")
  enrolledCourses CourseEnrollment[]
  lessonViews     LessonView[]
  activityLogs    ActivityLog[]
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String
  users       User[] // users belonging to the role
  permissions Permission[] // permissions assigned to the role
}

enum PermissionType {
  READ    // Basic read/view access
  CREATE  // Ability to create new resources
  UPDATE  // Ability to modify existing resources
  DELETE  // Ability to remove resources
  MANAGE  // Full control (typically includes all above permissions)
}

model Permission {
  id    Int            @id @default(autoincrement())
  name  PermissionType
  roles Role[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])

  // Allow creation if it's the user's own account
  @@allow('create', auth() == user)
  
  // Allow read if:
  // 1. It's the user's own account OR
  // 2. The authenticated user has READ permission
  @@allow('read', auth() == user || auth().roles?[permissions?[name == READ]])
  
  // Allow update if:
  // 1. It's the user's own account OR
  // 2. The authenticated user has UPDATE permission
  @@allow('update', auth() == user || auth().roles?[permissions?[name == UPDATE]])
  
  // Allow delete if:
  // 1. It's the user's own account OR
  // 2. The authenticated user has DELETE permission
  @@allow('delete', auth() == user || auth().roles?[permissions?[name == DELETE]])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Allow creation for authenticated users (when they log in)
  @@allow('create', auth() != null)

  // Allow read if:
  // 1. It's the user's own session OR
  // 2. The authenticated user has READ permission
  @@allow('read', auth() == user || auth().roles?[permissions?[name == READ]])

  // Allow update if:
  // 1. It's the user's own session OR
  // 2. The authenticated user has UPDATE permission
  @@allow('update', auth() == user || auth().roles?[permissions?[name == UPDATE]])

  // Allow delete if:
  // 1. It's the user's own session (logout) OR
  // 2. The authenticated user has DELETE permission
  @@allow('delete', auth() == user || auth().roles?[permissions?[name == DELETE]])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

enum QuestionType {
  YOLO
  FORMAL
}

enum Visibility {
  PUBLIC
  PRIVATE
}

enum Status {
  OPEN
  CLOSED
  SOLVED
}

model Question {
  id          String         @id @default(cuid())
  title       String         @length(min: 3, max: 300)
  content     String         @length(min: 10)
  type        QuestionType
  visibility  Visibility     @default(PUBLIC)
  
  // For formal questions
  topic       String?
  attachments Attachment[]
  
  // Metadata
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  
  // Relations
  authorId    String
  author      User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  answers     Answer[]
  tags        Tag[]
  votes       QuestionVote[]
  
  // Course structure relations
  courseId    String?
  course      Course?        @relation(fields: [courseId], references: [id])
  lessonId    String?
  lesson      Lesson?        @relation(fields: [lessonId], references: [id])
  
  // Engagement metrics
  viewCount   Int            @default(0)
  
  // Access control
  @@allow('create', auth() != null)
  @@allow('read', true)
  @@allow('update', auth() == author)
  @@allow('delete', auth() == author || auth().roles?[permissions?[name == DELETE]])

  slug        String         @unique
  status      Status         @default(OPEN)
  
  // Add reverse relations for easy querying
  @@index([courseId])
  @@index([lessonId])
}

model Answer {
  id         String       @id @default(cuid())
  content    String       @length(min: 10)
  isAccepted Boolean      @default(false)
  
  // Metadata
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  
  // Relations
  authorId   String
  author     User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  questionId String
  question   Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  votes      AnswerVote[]
  
  // Access control
  @@allow('create', auth() != null)
  @@allow('read', question.visibility == PUBLIC || auth() == author || auth() == question.author || auth().roles?[name == "TEACHER"])
  @@allow('update', auth() == author)
  @@allow('delete', auth() == author || auth().roles?[permissions?[name == DELETE]])
}

model Tag {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  questions   Question[]
  
  // For AI-suggested tags
  aiGenerated Boolean    @default(false)
  verified    Boolean    @default(false)
  
  // Course relation
  courses     Course[]

  @@allow('create', auth() != null)
  @@allow('read', true)
  @@allow('update', auth() != null)
  @@allow('delete', auth().roles?[permissions?[name == DELETE]])
}

model Attachment {
  id         String   @id @default(cuid())
  url        String
  type       String      // e.g., "image", "document", etc.
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@allow('create', auth() != null)
  @@allow('read', question.visibility == PUBLIC || auth() == question.author)
  @@allow('delete', auth() == question.author || auth().roles?[permissions?[name == DELETE]])
}

model QuestionVote {
  id         String   @id @default(cuid())
  value      Int         // 1 for upvote, -1 for downvote
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([questionId, userId])
  @@allow('create,update', auth() == user)
  @@allow('read', true)
  @@allow('delete', auth() == user)
}

model AnswerVote {
  id       String @id @default(cuid())
  value    Int         // 1 for upvote, -1 for downvote
  answerId String
  answer   Answer @relation(fields: [answerId], references: [id], onDelete: Cascade)
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([answerId, userId])
  @@allow('create,update', auth() == user)
  @@allow('read', true)
  @@allow('delete', auth() == user)
}

// Course models
model Course {
  id          String             @id @default(cuid())
  title       String             @length(min: 3, max: 100)
  description String             @length(min: 10, max: 1000)
  slug        String             @unique
  
  // New field for course structure/hierarchy
  // structure   Json?       // (Deprecated â€“ use modules/chapters instead)
  modules     CourseModule[]
  
  // Metadata
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  
  // Relations
  authorId    String
  author      User               @relation("CourseCreator", fields: [authorId], references: [id])
  lessons     Lesson[]           // Direct relation to lessons
  tags        Tag[]
  questions   Question[]
  enrollments CourseEnrollment[]
  
  // Access control
  @@allow('create', auth() != null && auth().roles?[name == "TEACHER"])
  @@allow('read', true)
  @@allow('update', auth() == author || auth().roles?[permissions?[name == UPDATE]])
  @@allow('delete', auth() == author || auth().roles?[permissions?[name == DELETE]])

  @@index([authorId])
}

model CourseEnrollment {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Unique constraint to prevent duplicate enrollments
  @@unique([userId, courseId])
  
  // Access control
  @@allow('create', auth() == user)
  @@allow('read', auth() == user || auth() == course.author)
  @@allow('delete', auth() == user || auth() == course.author)
}

// New model for Lesson
model Lesson {
  id        String       @id @default(cuid())
  title     String       @length(min: 1, max: 100)
  slug      String
  summary   String?      // Optional summary or resource link
  order     Int
  
  // Metadata
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  
  // New relations for module/chapter
  chapterId String?
  chapter   CourseChapter? @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  
  // Existing course relation retained
  courseId  String
  course    Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  questions Question[]  // Questions linked to this lesson
  views     LessonView[]
  files     LessonFile[]
  
  // Arbitrary metadata storage for lessons
  metadata   Json?       @default("{}")

  // Unique constraint for slug within a course
  @@unique([courseId, slug])
  
  // Access control
  @@allow('create', auth() != null)
  @@allow('read', true)
  @@allow('update', auth() != null && auth().roles?[permissions?[name == UPDATE]])
  @@allow('delete', auth() != null && auth().roles?[permissions?[name == DELETE]])
}

// New model for LessonFile
model LessonFile {
  id        String   @id @default(cuid())
  url       String
  type      String
  lessonId  String
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@allow('create', auth() != null)
  @@allow('read', true)
  @@allow('delete', auth() != null && auth().roles?[permissions?[name == DELETE]])
}

// Activity logging schema
enum ActivityType {
  VIEW_LESSON
  UNVIEW_LESSON
  ASK_QUESTION
  ANSWER_QUESTION
  UPVOTE_QUESTION
  DOWNVOTE_QUESTION
  UPVOTE_ANSWER
  DOWNVOTE_ANSWER
}

model LessonView {
  userId   String
  lessonId String
  viewedAt DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson   Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@allow('create', auth() != null)
  @@allow('read', true)
  @@allow('update', auth() == user)
  @@allow('delete', auth() == user)

  @@id([userId, lessonId])
}

model ActivityLog {
  id         String       @id @default(cuid())
  userId     String
  type       ActivityType
  entityType String?
  entityId   String?
  metadata   Json?        @default("{}")
  createdAt  DateTime     @default(now())

  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, type])
  @@index([entityType, entityId])
}

// New model for course modules
model CourseModule {
  id         String        @id @default(cuid())
  title      String        @length(min: 1, max: 100)
  slug       String
  order      Int
  courseId   String
  course     Course        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  chapters   CourseChapter[]
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @default(now())

  @@unique([courseId, slug])
  @@allow('create', auth() != null)
  @@allow('read', true)
  @@allow('update', auth() != null && auth().roles?[permissions?[name == UPDATE]])
  @@allow('delete', auth() != null && auth().roles?[permissions?[name == DELETE]])
}

// New model for course chapters
model CourseChapter {
  id         String        @id @default(cuid())
  title      String        @length(min: 1, max: 100)
  slug       String
  order      Int
  moduleId   String
  module     CourseModule  @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  lessons    Lesson[]
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @default(now())

  @@unique([moduleId, slug])
  @@allow('create', auth() != null)
  @@allow('read', true)
  @@allow('update', auth() != null && auth().roles?[permissions?[name == UPDATE]])
  @@allow('delete', auth() != null && auth().roles?[permissions?[name == DELETE]])
}
