//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum PermissionType {
  READ
  CREATE
  UPDATE
  DELETE
  MANAGE
}

enum QuestionType {
  YOLO
  FORMAL
}

enum Visibility {
  PUBLIC
  PRIVATE
}

enum Status {
  OPEN
  CLOSED
  SOLVED
}

model User {
  id              String             @id() @default(cuid())
  name            String?
  email           String             @unique()
  password        String?
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  Authenticator   Authenticator[]
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt()
  roles           Role[]
  questions       Question[]
  answers         Answer[]
  questionVotes   QuestionVote[]
  answerVotes     AnswerVote[]
  createdCourses  Course[]           @relation("CourseCreator")
  enrolledCourses CourseEnrollment[]
}

model Role {
  id          Int          @id() @default(autoincrement())
  name        String
  users       User[]
  permissions Permission[]
}

model Permission {
  id    Int            @id() @default(autoincrement())
  name  PermissionType
  roles Role[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt()
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique()
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt()
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique()
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Question {
  id          String         @id() @default(cuid())
  title       String
  content     String
  type        QuestionType
  visibility  Visibility     @default(PUBLIC)
  topic       String?
  attachments Attachment[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt()
  authorId    String
  author      User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  answers     Answer[]
  tags        Tag[]
  votes       QuestionVote[]
  courseId    String?
  course      Course?        @relation(fields: [courseId], references: [id])
  volumeId    String?
  volume      Volume?        @relation(fields: [volumeId], references: [id])
  chapterId   String?
  chapter     Chapter?       @relation(fields: [chapterId], references: [id])
  moduleId    String?
  module      Module?        @relation(fields: [moduleId], references: [id])
  lessonId    String?
  lesson      Lesson?        @relation(fields: [lessonId], references: [id])
  activityId  String?
  activity    Activity?      @relation(fields: [activityId], references: [id])
  viewCount   Int            @default(0)
  slug        String         @unique()
  status      Status         @default(OPEN)

  @@index([courseId])
  @@index([volumeId])
  @@index([chapterId])
  @@index([moduleId])
  @@index([lessonId])
  @@index([activityId])
}

model Answer {
  id         String       @id() @default(cuid())
  content    String
  isAccepted Boolean      @default(false)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt()
  authorId   String
  author     User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  questionId String
  question   Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  votes      AnswerVote[]
}

model Tag {
  id          String     @id() @default(cuid())
  name        String     @unique()
  description String?
  questions   Question[]
  aiGenerated Boolean    @default(false)
  verified    Boolean    @default(false)
  courses     Course[]
}

model Attachment {
  id         String   @id() @default(cuid())
  url        String
  type       String
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model QuestionVote {
  id         String   @id() @default(cuid())
  value      Int
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([questionId, userId])
}

model AnswerVote {
  id       String @id() @default(cuid())
  value    Int
  answerId String
  answer   Answer @relation(fields: [answerId], references: [id], onDelete: Cascade)
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([answerId, userId])
}

model Course {
  id          String             @id() @default(cuid())
  title       String
  description String
  slug        String             @unique()
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt()
  authorId    String
  author      User               @relation("CourseCreator", fields: [authorId], references: [id])
  volumes     Volume[]
  modules     Module[]
  tags        Tag[]
  questions   Question[]
  enrollments CourseEnrollment[]

  @@index([authorId])
}

model CourseEnrollment {
  id        String   @id() @default(cuid())
  userId    String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

model Volume {
  id        String     @id() @default(cuid())
  title     String
  overview  String?
  order     Int
  slug      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt()
  courseId  String
  course    Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  chapters  Chapter[]
  questions Question[]

  @@unique([courseId, slug])
}

model Chapter {
  id           String     @id() @default(cuid())
  title        String
  introduction String?
  summary      String?
  order        Int
  slug         String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt()
  volumeId     String
  volume       Volume     @relation(fields: [volumeId], references: [id], onDelete: Cascade)
  modules      Module[]
  questions    Question[]

  @@unique([volumeId, slug])
}

model Module {
  id        String     @id() @default(cuid())
  title     String
  content   String
  order     Int
  slug      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt()
  courseId  String?
  course    Course?    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  chapterId String?
  chapter   Chapter?   @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  questions Question[]
  lessons   Lesson[]

  @@unique([courseId, slug], name: "courseModuleSlug")
  @@unique([chapterId, slug], name: "chapterModuleSlug")
}

model Lesson {
  id         String     @id() @default(cuid())
  title      String
  theory     String
  examples   String?
  order      Int
  slug       String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt()
  moduleId   String
  module     Module     @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  activities Activity[]
  questions  Question[]

  @@unique([moduleId, slug])
}

model Activity {
  id          String     @id() @default(cuid())
  title       String
  description String
  problemSet  String?
  hints       String?
  order       Int
  slug        String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt()
  lessonId    String
  lesson      Lesson     @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  questions   Question[]

  @@unique([lessonId, slug])
}
